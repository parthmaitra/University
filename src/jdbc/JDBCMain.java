package jdbc;

import jdbc.dao.EmployeeDao;
import model.Employee;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.UUID;

public class JDBCMain {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static EmployeeDao employeeDao = new EmployeeDao();
    public static void main(String[] args) throws IOException, ClassNotFoundException, SQLException {
        HashMap<String, Employee> listOfEmployees = employeeDao.getEmployees();
        System.out.println("Enter the number of Employees");
        int n = Integer.parseInt(br.readLine());
        Employee employee = null;
        for (int i = 0; i <n ; i++) {
            try {
                System.out.println("Do you want to auto generate the id?");
                String isAutoGenerated = br.readLine();
                switch (isAutoGenerated) {
                    case "Y":
                    case "y":
                    case "yes":
                    case "Yes": employee = createEmployee();
                        break;
                    case "N":
                    case "n":
                    case "no":
                    case "No": System.out.println("Enter the employee id");
                        String id = br.readLine();
                        employee = createEmployee(id);
                        break;
                    default:
                        System.out.println("Enter the right answer, you moron!");
                }
                listOfEmployees.put(employee.getId(),employee);
                employeeDao.insertEmployee(employee);
            } catch (IOException e) {
                System.out.println("Error occurred while creating an employee"+e.getMessage());
            }
        }
    }
    private static void searchEmployee(HashMap<String, Employee> listOfEmployees) throws IOException, ClassNotFoundException {
        System.out.println("Enter the id to be searched");
        String searchId = br.readLine();
        Employee searchOutput = listOfEmployees.get(searchId);
        if (searchOutput!=null) {
            printEmployeeDetails(searchOutput);
        }
        else {
            System.out.println("Employee not found");
        }
    }
    private static Employee createEmployee() throws IOException {
        Employee employee = new Employee();
        employee.setId(UUID.randomUUID().toString());
        System.out.println("Enter the name of the Employee:");
        String name = br.readLine();
        employee.setName(name);
        System.out.println("Enter the date of birth:");
        employee.setDateOfBirth(br.readLine());
        System.out.println("Enter the salary:");
        int salary = Integer.parseInt(br.readLine());
        employee.setSalary(salary);
        return employee;
    }
    private static Employee createEmployee(String id) throws IOException {
        Employee employee = new Employee();
        employee.setId(id);
        System.out.println("Enter the name of the Employee:");
        String name = br.readLine();
        employee.setName(name);
        System.out.println("Enter the date of birth:");
        employee.setDateOfBirth(br.readLine());
        System.out.println("Enter the salary:");
        int salary = Integer.parseInt(br.readLine());
        employee.setSalary(salary);
        return employee;
    }
    private static void printEmployeeDetails(Employee employee) {
        System.out.println("Id:" + employee.getId());
        System.out.println("Name:" + employee.getName());
        System.out.println("Date of birth:" + employee.getDateOfBirth());
        System.out.println("Salary:" + employee.getSalary());
    }
}
